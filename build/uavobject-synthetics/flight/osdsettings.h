/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup OsdSettings OsdSettings 
 * @brief OSD settings used by the OSDgen module
 *
 * Autogenerated files and functions for OsdSettings Object
 
 * @{ 
 *
 * @file       osdsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     PhoenixPilot, http://github.com/PhoenixPilot, Copyright (C) 2012
 * @brief      Implementation of the OsdSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: osdsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef OSDSETTINGS_H
#define OSDSETTINGS_H

// Object constants
#define OSDSETTINGS_OBJID 0x253C2166
#define OSDSETTINGS_ISSINGLEINST 1
#define OSDSETTINGS_ISSETTINGS 1
#define OSDSETTINGS_NUMBYTES 31

// Generic interface functions
int32_t OsdSettingsInitialize();
UAVObjHandle OsdSettingsHandle();
void OsdSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    int16_t AttitudeSetup[2];
    int16_t TimeSetup[2];
    int16_t BatterySetup[2];
    int16_t SpeedSetup[2];
    int16_t AltitudeSetup[2];
    int16_t HeadingSetup[2];
    uint8_t Attitude;
    uint8_t Time;
    uint8_t Battery;
    uint8_t Speed;
    uint8_t Altitude;
    uint8_t Heading;
    uint8_t Screen;

} __attribute__((packed)) __attribute__((aligned(4))) OsdSettingsData;

// Typesafe Object access functions
/**
 * @function OsdSettingsGet(dataOut)
 * @brief Populate a OsdSettingsData object
 * @param[out] dataOut 
 */
static inline int32_t OsdSettingsGet(OsdSettingsData *dataOut) { return UAVObjGetData(OsdSettingsHandle(), dataOut); }

static inline int32_t OsdSettingsSet(const OsdSettingsData *dataIn) { return UAVObjSetData(OsdSettingsHandle(), dataIn); }

static inline int32_t OsdSettingsInstGet(uint16_t instId, OsdSettingsData *dataOut) { return UAVObjGetInstanceData(OsdSettingsHandle(), instId, dataOut); }

static inline int32_t OsdSettingsInstSet(uint16_t instId, const OsdSettingsData *dataIn) { return UAVObjSetInstanceData(OsdSettingsHandle(), instId, dataIn); }

static inline int32_t OsdSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(OsdSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t OsdSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(OsdSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t OsdSettingsCreateInstance() { return UAVObjCreateInstance(OsdSettingsHandle(), &OsdSettingsSetDefaults); }

static inline void OsdSettingsRequestUpdate() { UAVObjRequestUpdate(OsdSettingsHandle()); }

static inline void OsdSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(OsdSettingsHandle(), instId); }

static inline void OsdSettingsUpdated() { UAVObjUpdated(OsdSettingsHandle()); }

static inline void OsdSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(OsdSettingsHandle(), instId); }

static inline int32_t OsdSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(OsdSettingsHandle(), dataOut); }

static inline int32_t OsdSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(OsdSettingsHandle(), dataIn); }

static inline int8_t OsdSettingsReadOnly() { return UAVObjReadOnly(OsdSettingsHandle()); }

// Field information
// Field AttitudeSetup information
/* Array element names for field AttitudeSetup */
typedef enum { OSDSETTINGS_ATTITUDESETUP_X=0, OSDSETTINGS_ATTITUDESETUP_Y=1 } OsdSettingsAttitudeSetupElem;
/* Number of elements for field AttitudeSetup */
#define OSDSETTINGS_ATTITUDESETUP_NUMELEM 2
// Field TimeSetup information
/* Array element names for field TimeSetup */
typedef enum { OSDSETTINGS_TIMESETUP_X=0, OSDSETTINGS_TIMESETUP_Y=1 } OsdSettingsTimeSetupElem;
/* Number of elements for field TimeSetup */
#define OSDSETTINGS_TIMESETUP_NUMELEM 2
// Field BatterySetup information
/* Array element names for field BatterySetup */
typedef enum { OSDSETTINGS_BATTERYSETUP_X=0, OSDSETTINGS_BATTERYSETUP_Y=1 } OsdSettingsBatterySetupElem;
/* Number of elements for field BatterySetup */
#define OSDSETTINGS_BATTERYSETUP_NUMELEM 2
// Field SpeedSetup information
/* Array element names for field SpeedSetup */
typedef enum { OSDSETTINGS_SPEEDSETUP_X=0, OSDSETTINGS_SPEEDSETUP_Y=1 } OsdSettingsSpeedSetupElem;
/* Number of elements for field SpeedSetup */
#define OSDSETTINGS_SPEEDSETUP_NUMELEM 2
// Field AltitudeSetup information
/* Array element names for field AltitudeSetup */
typedef enum { OSDSETTINGS_ALTITUDESETUP_X=0, OSDSETTINGS_ALTITUDESETUP_Y=1 } OsdSettingsAltitudeSetupElem;
/* Number of elements for field AltitudeSetup */
#define OSDSETTINGS_ALTITUDESETUP_NUMELEM 2
// Field HeadingSetup information
/* Array element names for field HeadingSetup */
typedef enum { OSDSETTINGS_HEADINGSETUP_X=0, OSDSETTINGS_HEADINGSETUP_Y=1 } OsdSettingsHeadingSetupElem;
/* Number of elements for field HeadingSetup */
#define OSDSETTINGS_HEADINGSETUP_NUMELEM 2
// Field Attitude information
/* Enumeration options for field Attitude */
typedef enum { OSDSETTINGS_ATTITUDE_DISABLED=0, OSDSETTINGS_ATTITUDE_ENABLED=1 } OsdSettingsAttitudeOptions;
// Field Time information
/* Enumeration options for field Time */
typedef enum { OSDSETTINGS_TIME_DISABLED=0, OSDSETTINGS_TIME_ENABLED=1 } OsdSettingsTimeOptions;
// Field Battery information
/* Enumeration options for field Battery */
typedef enum { OSDSETTINGS_BATTERY_DISABLED=0, OSDSETTINGS_BATTERY_ENABLED=1 } OsdSettingsBatteryOptions;
// Field Speed information
/* Enumeration options for field Speed */
typedef enum { OSDSETTINGS_SPEED_DISABLED=0, OSDSETTINGS_SPEED_ENABLED=1 } OsdSettingsSpeedOptions;
// Field Altitude information
/* Enumeration options for field Altitude */
typedef enum { OSDSETTINGS_ALTITUDE_DISABLED=0, OSDSETTINGS_ALTITUDE_ENABLED=1 } OsdSettingsAltitudeOptions;
// Field Heading information
/* Enumeration options for field Heading */
typedef enum { OSDSETTINGS_HEADING_DISABLED=0, OSDSETTINGS_HEADING_ENABLED=1 } OsdSettingsHeadingOptions;
// Field Screen information


// set/Get functions
extern void OsdSettingsAttitudeSetupSet( int16_t *NewAttitudeSetup );
extern void OsdSettingsAttitudeSetupGet( int16_t *NewAttitudeSetup );
extern void OsdSettingsTimeSetupSet( int16_t *NewTimeSetup );
extern void OsdSettingsTimeSetupGet( int16_t *NewTimeSetup );
extern void OsdSettingsBatterySetupSet( int16_t *NewBatterySetup );
extern void OsdSettingsBatterySetupGet( int16_t *NewBatterySetup );
extern void OsdSettingsSpeedSetupSet( int16_t *NewSpeedSetup );
extern void OsdSettingsSpeedSetupGet( int16_t *NewSpeedSetup );
extern void OsdSettingsAltitudeSetupSet( int16_t *NewAltitudeSetup );
extern void OsdSettingsAltitudeSetupGet( int16_t *NewAltitudeSetup );
extern void OsdSettingsHeadingSetupSet( int16_t *NewHeadingSetup );
extern void OsdSettingsHeadingSetupGet( int16_t *NewHeadingSetup );
extern void OsdSettingsAttitudeSet( uint8_t *NewAttitude );
extern void OsdSettingsAttitudeGet( uint8_t *NewAttitude );
extern void OsdSettingsTimeSet( uint8_t *NewTime );
extern void OsdSettingsTimeGet( uint8_t *NewTime );
extern void OsdSettingsBatterySet( uint8_t *NewBattery );
extern void OsdSettingsBatteryGet( uint8_t *NewBattery );
extern void OsdSettingsSpeedSet( uint8_t *NewSpeed );
extern void OsdSettingsSpeedGet( uint8_t *NewSpeed );
extern void OsdSettingsAltitudeSet( uint8_t *NewAltitude );
extern void OsdSettingsAltitudeGet( uint8_t *NewAltitude );
extern void OsdSettingsHeadingSet( uint8_t *NewHeading );
extern void OsdSettingsHeadingGet( uint8_t *NewHeading );
extern void OsdSettingsScreenSet( uint8_t *NewScreen );
extern void OsdSettingsScreenGet( uint8_t *NewScreen );


#endif // OSDSETTINGS_H

/**
 * @}
 * @}
 */
