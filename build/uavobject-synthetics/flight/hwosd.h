/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup HwOSD HwOSD 
 * @brief Selection of optional hardware configurations.
 *
 * Autogenerated files and functions for HwOSD Object
 
 * @{ 
 *
 * @file       hwosd.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     PhoenixPilot, http://github.com/PhoenixPilot, Copyright (C) 2012
 * @brief      Implementation of the HwOSD object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: hwosd.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef HWOSD_H
#define HWOSD_H

// Object constants
#define HWOSD_OBJID 0xC46826EE
#define HWOSD_ISSINGLEINST 1
#define HWOSD_ISSETTINGS 1
#define HWOSD_NUMBYTES 1

// Generic interface functions
int32_t HwOSDInitialize();
UAVObjHandle HwOSDHandle();
void HwOSDSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t USB_HIDPort;

} __attribute__((packed)) __attribute__((aligned(4))) HwOSDData;

// Typesafe Object access functions
/**
 * @function HwOSDGet(dataOut)
 * @brief Populate a HwOSDData object
 * @param[out] dataOut 
 */
static inline int32_t HwOSDGet(HwOSDData *dataOut) { return UAVObjGetData(HwOSDHandle(), dataOut); }

static inline int32_t HwOSDSet(const HwOSDData *dataIn) { return UAVObjSetData(HwOSDHandle(), dataIn); }

static inline int32_t HwOSDInstGet(uint16_t instId, HwOSDData *dataOut) { return UAVObjGetInstanceData(HwOSDHandle(), instId, dataOut); }

static inline int32_t HwOSDInstSet(uint16_t instId, const HwOSDData *dataIn) { return UAVObjSetInstanceData(HwOSDHandle(), instId, dataIn); }

static inline int32_t HwOSDConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(HwOSDHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t HwOSDConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(HwOSDHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t HwOSDCreateInstance() { return UAVObjCreateInstance(HwOSDHandle(), &HwOSDSetDefaults); }

static inline void HwOSDRequestUpdate() { UAVObjRequestUpdate(HwOSDHandle()); }

static inline void HwOSDRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(HwOSDHandle(), instId); }

static inline void HwOSDUpdated() { UAVObjUpdated(HwOSDHandle()); }

static inline void HwOSDInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(HwOSDHandle(), instId); }

static inline int32_t HwOSDGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(HwOSDHandle(), dataOut); }

static inline int32_t HwOSDSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(HwOSDHandle(), dataIn); }

static inline int8_t HwOSDReadOnly() { return UAVObjReadOnly(HwOSDHandle()); }

// Field information
// Field USB_HIDPort information
/* Enumeration options for field USB_HIDPort */
typedef enum { HWOSD_USB_HIDPORT_USBTELEMETRY=0, HWOSD_USB_HIDPORT_RCTRANSMITTER=1, HWOSD_USB_HIDPORT_DISABLED=2 } HwOSDUSB_HIDPortOptions;


// set/Get functions
extern void HwOSDUSB_HIDPortSet( uint8_t *NewUSB_HIDPort );
extern void HwOSDUSB_HIDPortGet( uint8_t *NewUSB_HIDPort );


#endif // HWOSD_H

/**
 * @}
 * @}
 */
