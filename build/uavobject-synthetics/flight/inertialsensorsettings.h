/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup InertialSensorSettings InertialSensorSettings 
 * @brief Settings for the @ref Attitude module
 *
 * Autogenerated files and functions for InertialSensorSettings Object
 
 * @{ 
 *
 * @file       inertialsensorsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     PhoenixPilot, http://github.com/PhoenixPilot, Copyright (C) 2012
 * @brief      Implementation of the InertialSensorSettings object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: inertialsensorsettings.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef INERTIALSENSORSETTINGS_H
#define INERTIALSENSORSETTINGS_H

// Object constants
#define INERTIALSENSORSETTINGS_OBJID 0x6E411E4E
#define INERTIALSENSORSETTINGS_ISSINGLEINST 1
#define INERTIALSENSORSETTINGS_ISSETTINGS 1
#define INERTIALSENSORSETTINGS_NUMBYTES 60

// Generic interface functions
int32_t InertialSensorSettingsInitialize();
UAVObjHandle InertialSensorSettingsHandle();
void InertialSensorSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    float AccelBias[3];
    float AccelScale[3];
    float InitialGyroBias[3];
    float GyroScale[3];
    float GyroTempCoeff[3];

} __attribute__((packed)) __attribute__((aligned(4))) InertialSensorSettingsData;

// Typesafe Object access functions
/**
 * @function InertialSensorSettingsGet(dataOut)
 * @brief Populate a InertialSensorSettingsData object
 * @param[out] dataOut 
 */
static inline int32_t InertialSensorSettingsGet(InertialSensorSettingsData *dataOut) { return UAVObjGetData(InertialSensorSettingsHandle(), dataOut); }

static inline int32_t InertialSensorSettingsSet(const InertialSensorSettingsData *dataIn) { return UAVObjSetData(InertialSensorSettingsHandle(), dataIn); }

static inline int32_t InertialSensorSettingsInstGet(uint16_t instId, InertialSensorSettingsData *dataOut) { return UAVObjGetInstanceData(InertialSensorSettingsHandle(), instId, dataOut); }

static inline int32_t InertialSensorSettingsInstSet(uint16_t instId, const InertialSensorSettingsData *dataIn) { return UAVObjSetInstanceData(InertialSensorSettingsHandle(), instId, dataIn); }

static inline int32_t InertialSensorSettingsConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(InertialSensorSettingsHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t InertialSensorSettingsConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(InertialSensorSettingsHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t InertialSensorSettingsCreateInstance() { return UAVObjCreateInstance(InertialSensorSettingsHandle(), &InertialSensorSettingsSetDefaults); }

static inline void InertialSensorSettingsRequestUpdate() { UAVObjRequestUpdate(InertialSensorSettingsHandle()); }

static inline void InertialSensorSettingsRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(InertialSensorSettingsHandle(), instId); }

static inline void InertialSensorSettingsUpdated() { UAVObjUpdated(InertialSensorSettingsHandle()); }

static inline void InertialSensorSettingsInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(InertialSensorSettingsHandle(), instId); }

static inline int32_t InertialSensorSettingsGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(InertialSensorSettingsHandle(), dataOut); }

static inline int32_t InertialSensorSettingsSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(InertialSensorSettingsHandle(), dataIn); }

static inline int8_t InertialSensorSettingsReadOnly() { return UAVObjReadOnly(InertialSensorSettingsHandle()); }

// Field information
// Field AccelBias information
/* Array element names for field AccelBias */
typedef enum { INERTIALSENSORSETTINGS_ACCELBIAS_X=0, INERTIALSENSORSETTINGS_ACCELBIAS_Y=1, INERTIALSENSORSETTINGS_ACCELBIAS_Z=2 } InertialSensorSettingsAccelBiasElem;
/* Number of elements for field AccelBias */
#define INERTIALSENSORSETTINGS_ACCELBIAS_NUMELEM 3
// Field AccelScale information
/* Array element names for field AccelScale */
typedef enum { INERTIALSENSORSETTINGS_ACCELSCALE_X=0, INERTIALSENSORSETTINGS_ACCELSCALE_Y=1, INERTIALSENSORSETTINGS_ACCELSCALE_Z=2 } InertialSensorSettingsAccelScaleElem;
/* Number of elements for field AccelScale */
#define INERTIALSENSORSETTINGS_ACCELSCALE_NUMELEM 3
// Field InitialGyroBias information
/* Array element names for field InitialGyroBias */
typedef enum { INERTIALSENSORSETTINGS_INITIALGYROBIAS_X=0, INERTIALSENSORSETTINGS_INITIALGYROBIAS_Y=1, INERTIALSENSORSETTINGS_INITIALGYROBIAS_Z=2 } InertialSensorSettingsInitialGyroBiasElem;
/* Number of elements for field InitialGyroBias */
#define INERTIALSENSORSETTINGS_INITIALGYROBIAS_NUMELEM 3
// Field GyroScale information
/* Array element names for field GyroScale */
typedef enum { INERTIALSENSORSETTINGS_GYROSCALE_X=0, INERTIALSENSORSETTINGS_GYROSCALE_Y=1, INERTIALSENSORSETTINGS_GYROSCALE_Z=2 } InertialSensorSettingsGyroScaleElem;
/* Number of elements for field GyroScale */
#define INERTIALSENSORSETTINGS_GYROSCALE_NUMELEM 3
// Field GyroTempCoeff information
/* Array element names for field GyroTempCoeff */
typedef enum { INERTIALSENSORSETTINGS_GYROTEMPCOEFF_X=0, INERTIALSENSORSETTINGS_GYROTEMPCOEFF_Y=1, INERTIALSENSORSETTINGS_GYROTEMPCOEFF_Z=2 } InertialSensorSettingsGyroTempCoeffElem;
/* Number of elements for field GyroTempCoeff */
#define INERTIALSENSORSETTINGS_GYROTEMPCOEFF_NUMELEM 3


// set/Get functions
extern void InertialSensorSettingsAccelBiasSet( float *NewAccelBias );
extern void InertialSensorSettingsAccelBiasGet( float *NewAccelBias );
extern void InertialSensorSettingsAccelScaleSet( float *NewAccelScale );
extern void InertialSensorSettingsAccelScaleGet( float *NewAccelScale );
extern void InertialSensorSettingsInitialGyroBiasSet( float *NewInitialGyroBias );
extern void InertialSensorSettingsInitialGyroBiasGet( float *NewInitialGyroBias );
extern void InertialSensorSettingsGyroScaleSet( float *NewGyroScale );
extern void InertialSensorSettingsGyroScaleGet( float *NewGyroScale );
extern void InertialSensorSettingsGyroTempCoeffSet( float *NewGyroTempCoeff );
extern void InertialSensorSettingsGyroTempCoeffGet( float *NewGyroTempCoeff );


#endif // INERTIALSENSORSETTINGS_H

/**
 * @}
 * @}
 */
