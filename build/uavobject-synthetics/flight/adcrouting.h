/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{ 
 * @addtogroup ADCRouting ADCRouting 
 * @brief Selection of optional hardware configurations.
 *
 * Autogenerated files and functions for ADCRouting Object
 
 * @{ 
 *
 * @file       adcrouting.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @author     PhoenixPilot, http://github.com/PhoenixPilot, Copyright (C) 2012
 * @brief      Implementation of the ADCRouting object. This file has been 
 *             automatically generated by the UAVObjectGenerator.
 * 
 * @note       Object definition file: adcrouting.xml. 
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ADCROUTING_H
#define ADCROUTING_H

// Object constants
#define ADCROUTING_OBJID 0x7A806358
#define ADCROUTING_ISSINGLEINST 1
#define ADCROUTING_ISSETTINGS 1
#define ADCROUTING_NUMBYTES 4

// Generic interface functions
int32_t ADCRoutingInitialize();
UAVObjHandle ADCRoutingHandle();
void ADCRoutingSetDefaults(UAVObjHandle obj, uint16_t instId);

// Object data
typedef struct {
    uint8_t ChannelMap[4];

} __attribute__((packed)) __attribute__((aligned(4))) ADCRoutingData;

// Typesafe Object access functions
/**
 * @function ADCRoutingGet(dataOut)
 * @brief Populate a ADCRoutingData object
 * @param[out] dataOut 
 */
static inline int32_t ADCRoutingGet(ADCRoutingData *dataOut) { return UAVObjGetData(ADCRoutingHandle(), dataOut); }

static inline int32_t ADCRoutingSet(const ADCRoutingData *dataIn) { return UAVObjSetData(ADCRoutingHandle(), dataIn); }

static inline int32_t ADCRoutingInstGet(uint16_t instId, ADCRoutingData *dataOut) { return UAVObjGetInstanceData(ADCRoutingHandle(), instId, dataOut); }

static inline int32_t ADCRoutingInstSet(uint16_t instId, const ADCRoutingData *dataIn) { return UAVObjSetInstanceData(ADCRoutingHandle(), instId, dataIn); }

static inline int32_t ADCRoutingConnectQueue(xQueueHandle queue) { return UAVObjConnectQueue(ADCRoutingHandle(), queue, EV_MASK_ALL_UPDATES); }

static inline int32_t ADCRoutingConnectCallback(UAVObjEventCallback cb) { return UAVObjConnectCallback(ADCRoutingHandle(), cb, EV_MASK_ALL_UPDATES); }

static inline uint16_t ADCRoutingCreateInstance() { return UAVObjCreateInstance(ADCRoutingHandle(), &ADCRoutingSetDefaults); }

static inline void ADCRoutingRequestUpdate() { UAVObjRequestUpdate(ADCRoutingHandle()); }

static inline void ADCRoutingRequestInstUpdate(uint16_t instId) { UAVObjRequestInstanceUpdate(ADCRoutingHandle(), instId); }

static inline void ADCRoutingUpdated() { UAVObjUpdated(ADCRoutingHandle()); }

static inline void ADCRoutingInstUpdated(uint16_t instId) { UAVObjInstanceUpdated(ADCRoutingHandle(), instId); }

static inline int32_t ADCRoutingGetMetadata(UAVObjMetadata *dataOut) { return UAVObjGetMetadata(ADCRoutingHandle(), dataOut); }

static inline int32_t ADCRoutingSetMetadata(const UAVObjMetadata *dataIn) { return UAVObjSetMetadata(ADCRoutingHandle(), dataIn); }

static inline int8_t ADCRoutingReadOnly() { return UAVObjReadOnly(ADCRoutingHandle()); }

// Field information
// Field ChannelMap information
/* Enumeration options for field ChannelMap */
typedef enum { ADCROUTING_CHANNELMAP_DISABLED=0, ADCROUTING_CHANNELMAP_BATTERYVOLTAGE=1, ADCROUTING_CHANNELMAP_BATTERYCURRENT=2, ADCROUTING_CHANNELMAP_ANALOGAIRSPEED=3, ADCROUTING_CHANNELMAP_GENERIC=4 } ADCRoutingChannelMapOptions;
/* Array element names for field ChannelMap */
typedef enum { ADCROUTING_CHANNELMAP_ADC0=0, ADCROUTING_CHANNELMAP_ADC1=1, ADCROUTING_CHANNELMAP_ADC2=2, ADCROUTING_CHANNELMAP_ADC3=3 } ADCRoutingChannelMapElem;
/* Number of elements for field ChannelMap */
#define ADCROUTING_CHANNELMAP_NUMELEM 4


// set/Get functions
extern void ADCRoutingChannelMapSet( uint8_t *NewChannelMap );
extern void ADCRoutingChannelMapGet( uint8_t *NewChannelMap );


#endif // ADCROUTING_H

/**
 * @}
 * @}
 */
